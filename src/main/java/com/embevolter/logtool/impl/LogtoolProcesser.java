package com.embevolter.logtool.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Logger;

import com.embevolter.logtool.impl.logsEPA.EPALogtoolForLine;
import com.embevolter.logtool.model.LogLine;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;

/**
* The EPALogtool class implements file processing operations for 
* a logfile generated by EPA's WWW server in 1995.
* A JSON file can be generated from the input.
*
* @author  Bogdan Mircea
* @version 1.0
* @since   2020-07-20 
*/

public class LogtoolProcesser<T> implements ILogtoolProcesser<T> {
   
    static final Logger logger = Logger.getLogger(LogtoolProcesser.class.getName());
    
    private String inputFileName;
    private File inputFile;
    private File outputFile;
    private FileInputStream fileInputStream;

    private ObjectMapper mapper;
    private ObjectWriter writer;

    /**
     * Constructor
     * @param inputFileName: path of log file
    */
    public LogtoolProcesser(String inputFileName) {
        this.inputFileName = inputFileName;
    }

    public String getGeneratedOutputFileName(String inputFileName) {
        return inputFileName.replace("txt", "json");
    }

    public void launcher() {
        List<T> logLinesToWrite = new <T>ArrayList();
        try {
            //the EPALogtool implementation is used to read log entries into list
            logLinesToWrite = (List<T>) this.readProcessor();

            //the EPALogtool implementation is used to write a list of objects into a JSON file
            this.writeProcessor(logLinesToWrite);
        } catch (Exception e) {
            logger.info("Oooooops.... This cool tool cannot be used. /n Logtool Usage: java -jar Logtool 'file'");
            System.exit(0);
            //e.printStackTrace();
        }

        //give an account of the input file and the transformation 
        this.processReport((List<LogLine>)logLinesToWrite);
    }

    void processReport(List<LogLine> logLinesToWrite) {
        logger.info(String.format("A total of %d lines were processed successfully!", 
            logLinesToWrite.size()));
    }
    

    /**
     * Init FileInputStream
     * @return
    */
    private void initReader() {
        try {
            if (inputFile == null) 
                inputFile = new File(inputFileName);
            
            if (fileInputStream == null) 
                fileInputStream = new FileInputStream(inputFile);

        } catch (NullPointerException e) {
            logger.severe("You have not provided an input file!");
        } catch (FileNotFoundException e) {
            logger.severe(String.format("%s cannot be read! It might not exist on the specified path", inputFileName));
            System.exit(0);
        }
    }

    public Scanner initFileScanner() {
        initReader();

        return new Scanner(fileInputStream, "US-ASCII");
    }

    /**
     * Init Jackson JSON writer 
     * @return
     */
    private void initWriter(String outFileName) throws Exception {
        if (outputFile == null) 
            outputFile = new File(outFileName);

        if (mapper == null) 
            mapper = new ObjectMapper();
        
        if (writer == null) 
            writer = mapper.writer(new DefaultPrettyPrinter());
    }

    private void initWriter() throws Exception {
        initWriter(getGeneratedOutputFileName(inputFileName));
    }

    /**
     * Close FileInputStream  
     * @return
     */
    private void closeReader() {
        try {
            fileInputStream.close();
        } catch (IOException e) {
            logger.warning("Error when closing writer.");
        }
    }
    
    /**
     * Read every log entries and process it
     * 
     * @return list of objects to be serialized
     */
    @Override
    public List<?> readProcessor() {
        //init captured logLines 
        List<LogLine> logLinesToWrite = new ArrayList<LogLine>();
        EPALogtoolForLine lineProc = new EPALogtoolForLine();

        try (Scanner sc = initFileScanner() ) {
            while (sc.hasNextLine()) {
                String line = sc.nextLine();

                LogLine l = lineProc.processLine(line);
                logLinesToWrite.add(l);
            }

            // note that Scanner suppresses exceptions
            if (sc.ioException() != null) {
                throw sc.ioException();
            }
        } catch (final IOException e) {
            e.printStackTrace();
        } finally {
            this.closeReader();
        }
        return logLinesToWrite;
    }

       
    /**
     * The EPALogtool implementation is used to write a list of LogLine objects into a JSON file
     * with Jackson library
     * @return 
     */
    @Override
    public void writeProcessor(List<T> logLines, String outFileName) {
        try {
            initWriter(outFileName);
            writer.writeValue(outputFile, logLines);
        } catch (Exception ex) {
            logger.warning("Error during writing to the JSON file");
        } 
    }

    public void writeProcessor(List<T> logLines) {
        writeProcessor(logLines, getGeneratedOutputFileName(inputFileName));
    }

}